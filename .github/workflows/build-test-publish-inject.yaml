name: Microservice docker image build

on:
  workflow_call:
    inputs:
      disable-unit-tests:
        required: false
        default: false
        type: boolean
      enable-code-scans:
        required: false
        type: boolean
      enable-image-signing:
        required: false
        type: boolean
      k8s-microservice-name:
        required: false
        type: string
      k8s-namespace:
        required: false
        type: string
      should-deploy:
        required: false
        type: boolean
        default: true
    secrets:
      ghcr-token:
        required: true
        description: Github token allowing access to the libraries and ghcr.
      drone-server:
        required: false
        description: Drone server url.
      drone-token:
        required: false
        description: Drone token.
      signing-key:
        required: false
        description: Image signing key
      signing-password:
        required: false
        description: Image signing password

env:
  GOPRIVATE: "github.com/telegram-bot-app/*"
  ENABLE_CODE_SCANS: ${{ inputs.enable-code-scans }}
  ENABLE_IMAGE_SIGNING: ${{ inputs.enable-image-signing }}
  SHOULD_DEPLOY:  "${{ inputs.should_deploy }}"
  GO_VERSION: 1.21.3

jobs:
  # This job is responsible for preparation of the build
  # environment variables.
  prepare:
    name: Preparing build context
    runs-on: home-tgbotapp
    outputs:
      SANITISED_REPOSITORY_NAME: ${{ steps.get_env.outputs.SANITISED_REPOSITORY_NAME }}
      DOCKER_IMAGE: ${{ steps.get_env.outputs.DOCKER_IMAGE }}
      GITHUB_COMMIT_NUMBER: ${{ steps.get_env.outputs.GITHUB_COMMIT_NUMBER }}
      GITHUB_SHA: ${{ steps.get_env.outputs.GITHUB_SHA }}
      DOCKER_IMAGE_SEMVER: ${{ steps.semver.outputs.semantic_version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'
      - name: Set environment variables
        id: get_env
        run: |
          TMP_SANITISED_REPOSITORY_NAME=$(echo ${{ github.event.repository.name }} | sed -e 's|\.|-|g')
          echo "SANITISED_REPOSITORY_NAME=$TMP_SANITISED_REPOSITORY_NAME" > $GITHUB_OUTPUT
          echo "DOCKER_IMAGE=ghcr.io/${{ github.repository_owner }}/$TMP_SANITISED_REPOSITORY_NAME" >> $GITHUB_OUTPUT
          echo "GITHUB_COMMIT_NUMBER=$TMP_GITHUB_COMMITS_COUNT" >> $GITHUB_OUTPUT
          echo "GITHUB_SHA=$(echo ${GITHUB_SHA::8})" >> $GITHUB_OUTPUT

      - name: Establish semver
        id: semver
        uses: lukaszraczylo/semver-generator@v1
        with:
          config_file: semver.yaml
          repository_local: true
          github_username: ${{ github.ACTOR }}
          github_token: $GHCR_TOKEN

      - name: Semver check
        run: |
          echo "Semantic version detected: ${{ steps.semver.outputs.semantic_version }}"

      - name: Configure git for private modules
        uses: extractions/netrc@v1
        with:
          machine: github.com
          username: ${{ github.actor }}
          password: ${{ secrets.ghcr-token }}

      - name: Install Go
        uses: actions/setup-go@v4
        id: cache
        with:
          go-version: ${{env.GO_VERSION}}
          cache-dependency-path: "**/*.sum"

      - name: Go get dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          go get ./...

  # This job is responsible for running tests and linting the codebase
  test:
    name: "Unit testing"
    # needs: [prepare]
    runs-on: home-tgbotapp
    # container: github/super-linter:v4
    needs: [prepare]

    services:
      # Label used to access the service container
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure git for private modules
        uses: extractions/netrc@v1
        with:
          machine: github.com
          username: ${{ github.actor }}
          password: ${{ secrets.ghcr-token }}

      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{env.GO_VERSION}}
          cache-dependency-path: "**/*.sum"

      - name: Install dependencies
        run: |
          go get ./...

      - name: Conditional dependencies
        run: |
          if [ -f ./addons.sh ]; then
            ./addons.sh
          fi
      - name: Run unit tests
        if: inputs.disable-unit-tests == false
        env:
          REDIS_HOST: redis
          REDIS_PORT: 6379
        run: |
          export REDIS_SERVER="$REDIS_HOST:$REDIS_PORT"
          CI_RUN=${CI} make test

  # This job is responsible for running additional scans on the codebase
  code_scans:
    needs: [ prepare ]
    name: Code scans
    runs-on: home-tgbotapp
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure git for private modules
        uses: extractions/netrc@v1
        with:
          machine: github.com
          username: ${{ github.actor }}
          password: ${{ secrets.ghcr-token }}

      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{env.GO_VERSION}}
          cache-dependency-path: "**/*.sum"

      # - name: Prepare for code scans
      #   if: steps.cache.outputs.cache-hit != 'true'
      #   run: |
      #     go get ./...
      - name: WriteGoList
        run: go list -json -m all > go.list
      - name: Running nancy
        if: env.ENABLE_CODE_SCANS == true
        continue-on-error: true
        uses: sonatype-nexus-community/nancy-github-action@main
      - name: Running gosec
        if: env.ENABLE_CODE_SCANS == true
        continue-on-error: true
        uses: securego/gosec@master
        with:
          args: ./...

  # This job is responsible for building docker image
  build-local:
    needs: [ prepare, test, code_scans ]
    name: Docker image build (multiarch)
    runs-on: home-tgbotapp
#     runs-on: self-hosted
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure git for private modules
        uses: extractions/netrc@v1
        with:
          machine: github.com
          username: ${{ github.actor }}
          password: ${{ secrets.ghcr-token }}

      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{env.GO_VERSION}}
          cache-dependency-path: "**/*.sum"

      - name: Conditional dependencies
        run: |
          if [ -f ./addons.sh ]; then
            ./addons.sh
          fi

      - name: Build binaries
        run: |
          export LOCAL_VERSION=${{ needs.prepare.outputs.DOCKER_IMAGE_SEMVER }}
          export SANITISED_REPOSITORY_NAME=${{ needs.prepare.outputs.SANITISED_REPOSITORY_NAME }}
          export GOLDFLAGS="-s -w -X github.com/telegram-bot-app/libpack/config.PKG_NAME=$SANITISED_REPOSITORY_NAME -X github.com/telegram-bot-app/libpack/config.PKG_VERSION=$LOCAL_VERSION -X main.PKG_VERSION=$LOCAL_VERSION -X main.SVC_NAME=$SANITISED_REPOSITORY_NAME -X main.SVC_VERSION=`$(date +\"%Y%m%d%H%M\")`"

          # if $SANITISED_REPOSITORY_NAME is "ms-text-analysis" then use CGO_ENABLED=1
          # else use CGO_ENABLED=0
          if [ "$SANITISED_REPOSITORY_NAME" = "ms-text-analysis" ]; then
            export CGO_ENABLED=1
          else
            export CGO_ENABLED=0
          fi

          GOOS=linux GOARCH=amd64 go build -a -ldflags="$GOLDFLAGS" -o dist/bot-linux-amd64
          # CFLAGS="-march=armv8-a" CC=aarch64-linux-gnu-gcc GOOS=linux GOARCH=arm64 go build -a -ldflags="-extld=aarch64-linux-gnu-gcc $GOLDFLAGS" -o dist/bot-linux-arm64
          GOOS=linux GOARCH=arm64 go build -a -ldflags="$GOLDFLAGS" -o dist/bot-linux-arm64

          # CGO_ENABLED=0 GOOS=darwin go build -ldflags="$LDFLAGS" -a -installsuffix cgo -o dist/bot-darwin-amd64
          # CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -ldflags="$LDFLAGS" -a -installsuffix cgo -o dist/bot-darwin-arm64

          chmod -R 777 dist/*

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.ACTOR }}
          password: ${{ secrets.ghcr-token }}

      - name: Build image
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          builder: ${{ steps.buildx.outputs.name }}
          platforms: linux/arm64,linux/amd64 #,linux/aarch64
          push: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' }}
          tags: "${{ needs.prepare.outputs.DOCKER_IMAGE  }}:${{ needs.prepare.outputs.GITHUB_SHA }},${{ needs.prepare.outputs.DOCKER_IMAGE  }}:${{ needs.prepare.outputs.DOCKER_IMAGE_SEMVER }},${{ needs.prepare.outputs.DOCKER_IMAGE  }}:latest"
          labels: "org.opencontainers.image.revision=${{ needs.prepare.outputs.GITHUB_SHA }},org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ'),org.opencontainers.image.version=${{ needs.prepare.outputs.DOCKER_IMAGE_SEMVER }},com.github.repo.branch=$(echo ${GITHUB_REF##*/} | tr '[A-Z]' '[a-z]')"
          no-cache: false
#           cache-from: type=gha
#           cache-to: type=gha,mode=max
#           cache-from: type=local,src=/tmp/.buildx-cache
#           cache-to: type=local,dest=/tmp/.buildx-cache-new
          context: .
          secrets: |
            GIT_AUTH_TOKEN=${{ secrets.ghcr-token }}
#       - name: Move cache
#         run: |
#           rm -rf /tmp/.buildx-cache
#           mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # This job is responsible for creation of the release
  release:
    name: Create Release
    runs-on: home-tgbotapp
    needs: [ prepare, test, code_scans, build-local ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get list of the commits since last release
        run: |
          printf "$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"%h %s")" > .release_notes
      - name: Create Release
        id: create_release
        # if: needs.prepare.outputs.CHECK_IF_MASTER_BRANCH == 'true'
        uses: softprops/action-gh-release@v1
        with:
          name: v${{ needs.prepare.outputs.DOCKER_IMAGE_SEMVER }}
          body_path: .release_notes
          token: ${{ secrets.ghcr-token }}
          tag_name: v${{ needs.prepare.outputs.DOCKER_IMAGE_SEMVER }}
          prerelease: ${{ github.ref != 'refs/heads/master' && github.ref != 'refs/heads/main' }}

  deploy:
    name: Deploy to dev cluster
    runs-on: home-tgbotapp
    needs: [ prepare, build-local, release ]
    env:
      DRONE_SERVER: ${{ secrets.drone-server }}
      DRONE_TOKEN: ${{ secrets.drone-token }}
    steps:
      - name: Install drone client
        if: ${{ inputs.should-deploy == true }}
        run: |
          curl -L https://github.com/harness/drone-cli/releases/latest/download/drone_linux_amd64.tar.gz | tar zx
          sudo install -t /usr/local/bin drone
      - name: Run deployment
        if: ${{ inputs.should-deploy == true }}
        run: |
          drone build create --param IMAGE_VERSION=${{ needs.prepare.outputs.DOCKER_IMAGE }}:${{ needs.prepare.outputs.DOCKER_IMAGE_SEMVER }} --param IMAGE_NAMESPACE=${{ inputs.k8s-namespace }} --param IMAGE_DEPLOYMENT_NAME=${{ inputs.k8s-microservice-name }} ${{ github.repository }}
