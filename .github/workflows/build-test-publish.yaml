name: Microservice docker image build

on:
  workflow_call:
    inputs:
      enable-code-scans:
        required: false
        type: boolean
      k8s-microservice-name:
        required: true
        type: string
      k8s-namespace:
        required: true
        type: string
    secrets:
      ghcr-token:
        required: true
        description: Github token allowing access to the libraries and ghcr.
      drone-server:
        required: true
        description: Drone server url.
      drone-token:
        required: true
        description: Drone token.
      signing-key:
        required: true
        description: Image signing key
      signing-password:
        required: true
        description: Image signing password

env:
  GOPRIVATE: "github.com/telegram-bot-app/*"
  ENABLE_CODE_SCANS: ${{ inputs.enable-code-scans }}

jobs:
  # This job is responsible for preparation of the build
  # environment variables.
  prepare:
    name: Preparing build context
    runs-on: ubuntu-20.04
    outputs:
      SANITISED_REPOSITORY_NAME: ${{ steps.get_env.outputs.SANITISED_REPOSITORY_NAME }}
      DOCKER_IMAGE: ${{ steps.get_env.outputs.DOCKER_IMAGE }}
      GITHUB_COMMIT_NUMBER: ${{ steps.get_env.outputs.GITHUB_COMMIT_NUMBER }}
      GITHUB_SHA: ${{ steps.get_env.outputs.GITHUB_SHA }}
      DOCKER_IMAGE_SEMVER: ${{ steps.semver.outputs.semantic_version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: Set environment variables
        id: get_env
        run: |
          TMP_SANITISED_REPOSITORY_NAME=$(echo ${{ github.event.repository.name }} | sed -e 's|\.|-|g')
          echo "::set-output name=SANITISED_REPOSITORY_NAME::$TMP_SANITISED_REPOSITORY_NAME"
          echo "::set-output name=DOCKER_IMAGE::ghcr.io/${{ github.repository_owner }}/$TMP_SANITISED_REPOSITORY_NAME"
          echo "::set-output name=GITHUB_COMMIT_NUMBER::$(git rev-list --count HEAD)"
          echo "::set-output name=GITHUB_SHA::$(echo ${GITHUB_SHA::8})"

      - name: Establish semver
        id: semver
        uses: lukaszraczylo/semver-generator@v1
        with:
          config_file: semver.yaml
          repository_local: true
          github_username: ${{ github.ACTOR }}
          github_token: $GHCR_TOKEN

      - name: Semver check
        run: |
          echo "Semantic version detected: ${{ steps.semver.outputs.semantic_version }}"

  # This job is responsible for running tests and linting the codebase
  test:
    name: "Unit testing"
    # needs: [prepare]
    runs-on: ubuntu-20.04
    # container: github/super-linter:v4
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19
      - name: Configure git for private modules
        uses: extractions/netrc@v1
        with:
          machine: github.com
          username: ${{ github.actor }}
          password: ${{ secrets.ghcr-token }}
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
      - name: Run unit tests
        run: |
          CI_RUN=${CI} make test

  # This job is responsible for running additional scans on the codebase
  code_scans:
    # needs: [ prepare ]
    name: Code scans
    runs-on: ubuntu-20.04
    container: golang:1-buster
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Configure git for private modules
        uses: extractions/netrc@v1
        with:
          machine: github.com
          username: ${{ github.actor }}
          password: ${{ secrets.ghcr-token }}
      - uses: actions/cache@v3
        id: cache
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
      - name: Prepare for code scans
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          go get ./...
      - name: WriteGoList
        run: go list -json -m all > go.list
      - name: Running nancy
        if: env.ENABLE_CODE_SCANS == true
        continue-on-error: true
        uses: sonatype-nexus-community/nancy-github-action@main
      - name: Running gosec
        if: env.ENABLE_CODE_SCANS == true
        continue-on-error: true
        uses: securego/gosec@master
        with:
          args: ./...

  # This job is responsible for building docker image
  build-local:
    needs: [ prepare, test, code_scans ]
    name: Docker image build (multiarch)
    runs-on: ubuntu-20.04
#     runs-on: self-hosted
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        
      - uses: sigstore/cosign-installer@main

      - name: Write signing key to disk (only needed for `cosign sign --key`)
        run: echo "${{ secrets.signing-key }}" > cosign.key
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
#       - uses: actions/cache@v3
#         id: cache
#         with:
#           path: |
#             ~/.cache/go-build
#             ~/go/pkg/mod
#             /tmp/.buildx-cache
#           key: ${{ runner.os }}-go-buildx-${{ hashFiles('**/go.sum') }}
#           restore-keys: |
#             ${{ runner.os }}-go-buildx-${{ hashFiles('**/go.sum') }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.ACTOR }}
          password: ${{ secrets.ghcr-token }}
          
      - name: Build image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          platforms: linux/arm64,linux/amd64
          push: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' }}
          tags: "${{ needs.prepare.outputs.DOCKER_IMAGE  }}:${{ needs.prepare.outputs.GITHUB_SHA }},${{ needs.prepare.outputs.DOCKER_IMAGE  }}:${{ needs.prepare.outputs.DOCKER_IMAGE_SEMVER }},${{ needs.prepare.outputs.DOCKER_IMAGE  }}:latest"
          build-args: |
            ACCESS_TOKEN=${{ secrets.ghcr-token }}
            ACCESS_USERNAME=${{ github.actor }}
            MICROSERVICE_NAME=${{ github.event.repository.name }}
            GITHUB_COMMIT_NUMBER=${{ needs.prepare.outputs.GITHUB_COMMIT_NUMBER }}
            GITHUB_SHA=${{ needs.prepare.outputs.GITHUB_SHA }}
          labels: "org.opencontainers.image.revision=${{ needs.prepare.outputs.GITHUB_SHA }},org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ'),org.opencontainers.image.version=${{ needs.prepare.outputs.DOCKER_IMAGE_SEMVER }},com.github.repo.branch=$(echo ${GITHUB_REF##*/} | tr '[A-Z]' '[a-z]')"
          no-cache: false
#           cache-from: type=gha
#           cache-to: type=gha,mode=max
#           cache-from: type=local,src=/tmp/.buildx-cache
#           cache-to: type=local,dest=/tmp/.buildx-cache-new
          secrets: |
            GIT_AUTH_TOKEN=${{ secrets.ghcr-token }}
#       - name: Move cache
#         run: |
#           rm -rf /tmp/.buildx-cache
#           mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Sign container image
        run: |
          cosign sign --key cosign.key \
            ${{ needs.prepare.outputs.DOCKER_IMAGE  }}:${{ needs.prepare.outputs.DOCKER_IMAGE_SEMVER }}
        env:
          COSIGN_PASSWORD: "${{ secrets.signing-password }}"

  # This job is responsible for creation of the release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [ prepare, test, code_scans, build-local ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get list of the commits since last release
        run: |
          printf "$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"%h %s")" > .release_notes
      - name: Create Release
        id: create_release
        # if: needs.prepare.outputs.CHECK_IF_MASTER_BRANCH == 'true'
        uses: softprops/action-gh-release@v1
        with:
          name: v${{ needs.prepare.outputs.DOCKER_IMAGE_SEMVER }}
          body_path: .release_notes
          token: ${{ secrets.ghcr-token }}
          tag_name: v${{ needs.prepare.outputs.DOCKER_IMAGE_SEMVER }}
          prerelease: ${{ github.ref != 'refs/heads/master' && github.ref != 'refs/heads/main' }}

  deploy:
    name: Deploy to dev cluster
    runs-on: ubuntu-latest
    needs: [ prepare, build-local, release ]
    env:
      DRONE_SERVER: ${{ secrets.drone-server }}
      DRONE_TOKEN: ${{ secrets.drone-token }}
    steps:
      - name: Install drone client
        run: |
          curl -L https://github.com/harness/drone-cli/releases/latest/download/drone_linux_amd64.tar.gz | tar zx
          sudo install -t /usr/local/bin drone
      - name: Run deployment
        run: |
          drone build create --param IMAGE_VERSION=${{ needs.prepare.outputs.DOCKER_IMAGE }}:${{ needs.prepare.outputs.DOCKER_IMAGE_SEMVER }} --param IMAGE_NAMESPACE=${{ inputs.k8s-namespace }} --param IMAGE_DEPLOYMENT_NAME=${{ inputs.k8s-microservice-name }} ${{ github.repository }}
