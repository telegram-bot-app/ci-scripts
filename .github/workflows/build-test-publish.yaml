name: Microservice docker image build.

on:
  workflow_call: {}
  workflow_dispatch: {}
  push:
    paths-ignore:
    - '**.md'
    branches:
      - "master"
      - "main"

env:
  GOPRIVATE: "github.com/telegram-bot-app/*"

jobs:
  # This job is responsible for preparation of the build
  # environment variables.
  prepare:
    name: Preparing build context
    runs-on: ubuntu-20.04
    outputs:
      SANITISED_REPOSITORY_NAME: ${{ steps.get_env.outputs.SANITISED_REPOSITORY_NAME }}
      DOCKER_IMAGE: ${{ steps.get_env.outputs.DOCKER_IMAGE }}
      GITHUB_COMMIT_NUMBER: ${{ steps.get_env.outputs.GITHUB_COMMIT_NUMBER }}
      GITHUB_SHA: ${{ steps.get_env.outputs.GITHUB_SHA }}
      DOCKER_IMAGE_SEMVER: ${{ steps.semver.outputs.semantic_version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: Set environment variables
        id: get_env
        run: |
          TMP_SANITISED_REPOSITORY_NAME=$(echo ${{ github.event.repository.name }} | sed -e 's|\.|-|g')
          echo "::set-output name=SANITISED_REPOSITORY_NAME::$TMP_SANITISED_REPOSITORY_NAME"
          echo "::set-output name=DOCKER_IMAGE::ghcr.io/${{ github.repository_owner }}/$TMP_SANITISED_REPOSITORY_NAME"
          echo "::set-output name=GITHUB_COMMIT_NUMBER::$(git rev-list --count HEAD)"
          echo "::set-output name=GITHUB_SHA::$(echo ${GITHUB_SHA::8})"

      - name: Establish semver
        id: semver
        uses: lukaszraczylo/semver-generator@v1
        with:
          config_file: semver.yaml
          repository_local: true
          github_username: ${{ github.ACTOR }}
          github_token: ${{ secrets.GHCR_TOKEN }}

      - name: Semver check
        run: |
          echo "Semantic version detected: ${{ steps.semver.outputs.semantic_version }}"

  # This job is responsible for running tests and linting the codebase
  test:
    needs: [prepare]
    runs-on: ubuntu-20.04
    container: github/super-linter:v4
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Configure git for private modules
        run: |
          git config --global url."https://${{ github.repository_owner }}:${{ secrets.GHCR_TOKEN }}@github.com".insteadOf "https://github.com"
          export GOPRIVATE=${{ env.GOPRIVATE}}
      - name: Lint Code Base
        if: env.ENABLE_CODE_LINT == true
        env:
          VALIDATE_ALL_CODEBASE: true
          VALIDATE_DOCKERFILE: false # this leaves us with hadolint only
          VALIDATE_GO: false # disable bulk validation of go files, run the linter manually
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GHCR_TOKEN }}
          LOG_LEVEL: WARN
        run: |
          golangci-lint run --exclude-use-default ./...
          /action/lib/linter.sh
      - name: Run unit tests
        run: |
          make test CI_RUN=${CI}

  # This job is responsible for running additional scans on the codebase
  code_scans:
    needs: [ prepare ]
    name: Code scans pipeline
    runs-on: ubuntu-20.04
    container: golang:1-buster
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Configure git for private modules
        run: |
          git config --global url."https://${{ github.repository_owner }}:${{ secrets.GHCR_TOKEN }}@github.com".insteadOf "https://github.com"
          export GOPRIVATE=${{ env.GOPRIVATE}}
          go mod tidy
      - name: WriteGoList
        run: go list -json -m all > go.list
      - name: Running nancy
        if: env.ENABLE_CODE_SCANS == true
        uses: sonatype-nexus-community/nancy-github-action@main
      - name: Running gosec
        if: env.ENABLE_CODE_SCANS == true
        uses: securego/gosec@master
        with:
          args: ./...

  # This job is responsible for building docker image
  build:
    needs: [ prepare, test, code_scans ]
    name: Docker image build (multiarch)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.ACTOR }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          platforms: linux/arm64,linux/amd64
          push: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' }}
          tags: "${{ needs.prepare.outputs.DOCKER_IMAGE  }}:${{ needs.prepare.outputs.GITHUB_SHA }},${{ needs.prepare.outputs.DOCKER_IMAGE  }}:${{ needs.prepare.outputs.DOCKER_IMAGE_SEMVER }},${{ needs.prepare.outputs.DOCKER_IMAGE  }}:latest"
          build-args: |
            GITHUB_AUTH_TOKEN=${{ secrets.GHCR_TOKEN }}
            MICROSERVICE_NAME=${{ github.event.repository.name }}
            GITHUB_COMMIT_NUMBER=${{ needs.prepare.outputs.GITHUB_COMMIT_NUMBER }}
            GITHUB_SHA=${{ needs.prepare.outputs.GITHUB_SHA }}
          labels: "org.opencontainers.image.revision=${{ needs.prepare.outputs.GITHUB_SHA }},org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ'),org.opencontainers.image.version=${{ needs.prepare.outputs.DOCKER_IMAGE_SEMVER }},com.github.repo.branch=$(echo ${GITHUB_REF##*/} | tr '[A-Z]' '[a-z]')"
          no-cache: false

   # This job is responsible for creation of the release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [ prepare, build ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Get list of the commits since last release
        run: |
          echo "$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"%h %s")" > .release_notes
      - name: Create Release
        id: create_release
        uses: actions/create-release@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.prepare.outputs.DOCKER_IMAGE_SEMVER }}
          release_name: v${{ needs.prepare.outputs.DOCKER_IMAGE_SEMVER }}
          body_path: .release_notes
          draft: false
          prerelease: ${{ github.ref != 'refs/heads/master' && github.ref != 'refs/heads/main' }}