name: Microservice docker image build

on:
  workflow_call:
    inputs:
      disable-unit-tests:
        required: false
        default: false
        type: boolean
      enable-code-scans:
        required: false
        type: boolean
      enable-image-signing:
        required: false
        type: boolean
      k8s-microservice-name:
        required: false
        type: string
      k8s-namespace:
        required: false
        type: string
      should-deploy:
        required: false
        type: boolean
        default: true
    secrets:
      ghcr-token:
        required: true
        description: Github token allowing access to the libraries and ghcr.
      drone-server:
        required: false
        description: Drone server url.
      drone-token:
        required: false
        description: Drone token.
      signing-key:
        required: false
        description: Image signing key
      signing-password:
        required: false
        description: Image signing password

env:
  GOPRIVATE: "github.com/telegram-bot-app/*"
  ENABLE_CODE_SCANS: ${{ inputs.enable-code-scans }}
  ENABLE_IMAGE_SIGNING: ${{ inputs.enable-image-signing }}
  SHOULD_DEPLOY: "${{ inputs.should-deploy }}"
  GO_VERSION: "1.22"

jobs:
  prepare-and-test:
    name: Prepare and Test
    runs-on: tgbotapp-runner
    services:
      redis:
        image: redis:7.4.0-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    outputs:
      SANITISED_REPOSITORY_NAME: ${{ steps.get_env.outputs.SANITISED_REPOSITORY_NAME }}
      DOCKER_IMAGE: ${{ steps.get_env.outputs.DOCKER_IMAGE }}
      GITHUB_COMMIT_NUMBER: ${{ steps.get_env.outputs.GITHUB_COMMIT_NUMBER }}
      GITHUB_SHA: ${{ steps.get_env.outputs.GITHUB_SHA }}
      DOCKER_IMAGE_SEMVER: ${{ steps.semver.outputs.semantic_version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set environment variables
        id: get_env
        run: |
          TMP_SANITISED_REPOSITORY_NAME=$(echo ${{ github.event.repository.name }} | sed -e 's|\.|-|g')
          echo "SANITISED_REPOSITORY_NAME=$TMP_SANITISED_REPOSITORY_NAME" >> $GITHUB_OUTPUT
          echo "DOCKER_IMAGE=ghcr.io/${{ github.repository_owner }}/$TMP_SANITISED_REPOSITORY_NAME" >> $GITHUB_OUTPUT
          echo "GITHUB_COMMIT_NUMBER=$TMP_GITHUB_COMMITS_COUNT" >> $GITHUB_OUTPUT
          echo "GITHUB_SHA=$(echo ${GITHUB_SHA::8})" >> $GITHUB_OUTPUT
          sudo apt-get install git -y

      - name: Establish semver
        id: semver
        uses: lukaszraczylo/semver-generator@v1
        env:
          SEMVER_RAW_FLAGS: "--debug"
        with:
          config_file: semver.yaml
          repository_local: true
          github_username: ${{ github.ACTOR }}
          github_token: ${{ secrets.ghcr-token }}

      - name: Install Go
        uses: actions/setup-go@v5
        id: cache
        with:
          go-version: ${{env.GO_VERSION}}
          cache-dependency-path: "**/*.sum"

      - name: Configure git for private modules
        uses: extractions/netrc@v1
        with:
          machine: github.com
          username: ${{ github.actor }}
          password: ${{ secrets.ghcr-token }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Get dependencies and run tests
        run: |
          go get ./...
          if [ -f ./addons.sh ]; then
            ./addons.sh
          fi
          if [ "${{ inputs.disable-unit-tests }}" != "true" ]; then
            export REDIS_SERVER="redis:6379"
            CI_RUN=${CI} make test
          fi

      - name: Run code scans
        if: env.ENABLE_CODE_SCANS == true
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec ./...

  build-and-push:
    needs: prepare-and-test
    name: Build and Push Docker Image
    runs-on: tgbotapp-runner
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.ACTOR }}
          password: ${{ secrets.ghcr-token }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' }}
          tags: |
            ${{ needs.prepare-and-test.outputs.DOCKER_IMAGE }}:${{ needs.prepare-and-test.outputs.GITHUB_SHA }}
            ${{ needs.prepare-and-test.outputs.DOCKER_IMAGE }}:${{ needs.prepare-and-test.outputs.DOCKER_IMAGE_SEMVER }}
            ${{ needs.prepare-and-test.outputs.DOCKER_IMAGE }}:latest
          labels: |
            org.opencontainers.image.revision=${{ needs.prepare-and-test.outputs.GITHUB_SHA }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}
            org.opencontainers.image.version=${{ needs.prepare-and-test.outputs.DOCKER_IMAGE_SEMVER }}
            com.github.repo.branch=${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release-and-deploy:
    needs: [prepare-and-test, build-and-push]
    name: Release and Deploy
    runs-on: tgbotapp-runner
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: v${{ needs.prepare-and-test.outputs.DOCKER_IMAGE_SEMVER }}
          body: ${{ github.event.head_commit.message }}
          token: ${{ secrets.ghcr-token }}
          tag_name: v${{ needs.prepare-and-test.outputs.DOCKER_IMAGE_SEMVER }}
          prerelease: ${{ github.ref != 'refs/heads/master' && github.ref != 'refs/heads/main' }}

      - name: Deploy to dev cluster
        if: inputs.should-deploy == true
        env:
          DRONE_SERVER: ${{ secrets.drone-server }}
          DRONE_TOKEN: ${{ secrets.drone-token }}
        run: |
          apk add --no-cache curl
          curl -L https://github.com/harness/drone-cli/releases/latest/download/drone_linux_amd64.tar.gz | tar zx
          install -t /usr/local/bin drone
          drone build create --param IMAGE_VERSION=${{ needs.prepare-and-test.outputs.DOCKER_IMAGE }}:${{ needs.prepare-and-test.outputs.DOCKER_IMAGE_SEMVER }} --param IMAGE_NAMESPACE=${{ inputs.k8s-namespace }} --param IMAGE_DEPLOYMENT_NAME=${{ inputs.k8s-microservice-name }} ${{ github.repository }}
