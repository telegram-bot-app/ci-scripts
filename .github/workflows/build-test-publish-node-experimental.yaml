name: NodeJS service docker image build

on:
  workflow_call:
    inputs:
      enable-code-scans:
        required: false
        type: boolean
      node-app-path:
        required: true
        type: string
    secrets:
      ghcr-token:
        required: true
        description: Github token allowing access to the libraries and ghcr.

env:
  ENABLE_CODE_SCANS: ${{ inputs.enable-code-scans }}

jobs:
  # This job is responsible for preparation of the build
  # environment variables.
  prepare:
    name: Preparing build context
    runs-on: ubuntu-20.04
    outputs:
      SANITISED_REPOSITORY_NAME: ${{ steps.get_env.outputs.SANITISED_REPOSITORY_NAME }}
      DOCKER_IMAGE: ${{ steps.get_env.outputs.DOCKER_IMAGE }}
      GITHUB_COMMIT_NUMBER: ${{ steps.get_env.outputs.GITHUB_COMMIT_NUMBER }}
      GITHUB_SHA: ${{ steps.get_env.outputs.GITHUB_SHA }}
      DOCKER_IMAGE_SEMVER: ${{ steps.semver.outputs.semantic_version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: Set environment variables
        id: get_env
        run: |
          TMP_SANITISED_REPOSITORY_NAME=$(echo ${{ github.event.repository.name }} | sed -e 's|\.|-|g')
          echo "::set-output name=SANITISED_REPOSITORY_NAME::$TMP_SANITISED_REPOSITORY_NAME"
          echo "::set-output name=DOCKER_IMAGE::ghcr.io/${{ github.repository_owner }}/$TMP_SANITISED_REPOSITORY_NAME"
          echo "::set-output name=GITHUB_COMMIT_NUMBER::$(git rev-list --count HEAD)"
          echo "::set-output name=GITHUB_SHA::$(echo ${GITHUB_SHA::8})"

      - name: Establish semver
        id: semver
        uses: lukaszraczylo/semver-generator@v1
        with:
          config_file: semver.yaml
          repository_local: true
          github_username: ${{ github.ACTOR }}
          github_token: $GHCR_TOKEN

      - name: Semver check
        run: |
          echo "Semantic version detected: ${{ steps.semver.outputs.semantic_version }}"

  build-local:
    needs: [prepare]
    name: Building node application locally
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: |
          echo "::set-output name=dir-local::$(yarn cache dir)"
          echo "::set-output name=dir-global::$(yarn global dir)"
          echo "::set-output name=dir-global-bin::$(yarn global bin)"

      - name: Setup yarn cache
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        env:
            cache-version: v1
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir-local }}
            ${{ steps.yarn-cache-dir-path.outputs.dir-global }}
            ${{ steps.yarn-cache-dir-path.outputs.dir-global-bin }}
          key: ${{ runner.os }}-c-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-c-${{ env.cache-version }}-
            ${{ runner.os }}-c-
            ${{ runner.os }}-

      - name: Install dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: |
          # yarn install --network-timeout 1000000000 --ignore-optional --ignore-engines --link-duplicates --check-files
          yarn --prefer-offline --network-timeout 1000000000 --ignore-optional --ignore-engines --link-duplicates --check-files
          yarn global add @quasar/cli --network-timeout 1000000000

      - name: Inject additional metadata
        run: |
          # echo "{ \"version\": \"${{ needs.prepare.outputs.DOCKER_IMAGE_SEMVER }}\", \"commit\": \"${{ needs.prepare.outputs.GITHUB_SHA }}\", \"build\": \"$GITHUB_RUN_NUMBER/$GITHUB_REF_NAME $(date +'%d/%m/%Y/%H%M')\" }" > ${{ inputs.node-app-path }}/www/metadata.json
          printf "\nMETADATA_VERSION=${{ needs.prepare.outputs.DOCKER_IMAGE_SEMVER }}\nMETADATA_COMMIT=${{ needs.prepare.outputs.GITHUB_SHA }}\nMETADATA_BUILD=$GITHUB_RUN_NUMBER/$GITHUB_REF_NAME $(date +'%d/%m/%Y/%H%M')\n" >> .env-prod

      - name: Build the application
        run: |
          quasar -v
          quasar build -m ssr

      - name: Copy modules into non-dotfile directory
        run: |
          cp -r node_modules ${{ inputs.node-app-path }}/

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.ACTOR }}
          password: ${{ secrets.ghcr-token }}
      - name: Build image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          platforms: linux/arm64,linux/amd64
          push: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' }}
          tags: "${{ needs.prepare.outputs.DOCKER_IMAGE  }}:${{ needs.prepare.outputs.GITHUB_SHA }},${{ needs.prepare.outputs.DOCKER_IMAGE  }}:${{ needs.prepare.outputs.DOCKER_IMAGE_SEMVER }},${{ needs.prepare.outputs.DOCKER_IMAGE  }}:latest"
          build-args: |
            ACCESS_TOKEN=${{ secrets.ghcr-token }}
            ACCESS_USERNAME=${{ github.actor }}
            MICROSERVICE_NAME=${{ github.event.repository.name }}
            METADATA_GITHUB_SHA=${{ needs.prepare.outputs.GITHUB_SHA }}
            METADATA_BUILD_NUMBER="$GITHUB_RUN_ID/$GITHUB_REF_NAME/$(date +'%d/%m/%Y %H:%M')"
            METADATA_VERSION=${{ needs.prepare.outputs.DOCKER_IMAGE_SEMVER }}
          file: Dockerfile-ci
          context: ${{ inputs.node-app-path }}
          labels: "org.opencontainers.image.revision=${{ needs.prepare.outputs.GITHUB_SHA }},org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ'),org.opencontainers.image.version=${{ needs.prepare.outputs.DOCKER_IMAGE_SEMVER }},com.github.repo.branch=$(echo ${GITHUB_REF##*/} | tr '[A-Z]' '[a-z]')"
          no-cache: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
          secrets: |
            GIT_AUTH_TOKEN=${{ secrets.ghcr-token }}


  # # This job is responsible for running tests and linting the codebase
  # test:
  #   name: "Unit testing"
  #   # needs: [prepare]
  #   runs-on: ubuntu-20.04
  #   # container: github/super-linter:v4
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2
  #     - name: Install Go
  #       uses: actions/setup-go@v2
  #       with:
  #         go-version: 1.17.3
  #     - name: Configure git for private modules
  #       uses: extractions/netrc@v1
  #       with:
  #         machine: github.com
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.ghcr-token }}
  #     - uses: actions/cache@v2
  #       with:
  #         path: |
  #           ~/.cache/go-build
  #           ~/go/pkg/mod
  #         key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
  #         restore-keys: |
  #           ${{ runner.os }}-go-
  #     - name: Run unit tests
  #       run: |
  #         CI_RUN=${CI} make test

  # This job is responsible for running additional scans on the codebase
  # code_scans:
  #   # needs: [ prepare ]
  #   name: Code scans
  #   runs-on: ubuntu-20.04
  #   container: golang:1-buster
  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v2
  #     - name: Configure git for private modules
  #       uses: extractions/netrc@v1
  #       with:
  #         machine: github.com
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.ghcr-token }}
  #     - uses: actions/cache@v2
  #       id: cache
  #       with:
  #         path: |
  #           ~/.cache/go-build
  #           ~/go/pkg/mod
  #         key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
  #         restore-keys: |
  #           ${{ runner.os }}-go-
  #     - name: Prepare for code scans
  #       if: steps.cache.outputs.cache-hit != 'true'
  #       run: |
  #         go get ./...
  #     - name: WriteGoList
  #       run: go list -json -m all > go.list
  #     - name: Running nancy
  #       if: env.ENABLE_CODE_SCANS == true
  #       continue-on-error: true
  #       uses: sonatype-nexus-community/nancy-github-action@main
  #     - name: Running gosec
  #       if: env.ENABLE_CODE_SCANS == true
  #       continue-on-error: true
  #       uses: securego/gosec@master
  #       with:
  #         args: ./...

  # This job is responsible for building docker image
  # build:
  #   needs: [ prepare ]
  #   name: Docker image build (multiarch)
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v2
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v1
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1
  #     - name: Login to GHCR
  #       if: github.event_name != 'pull_request'
  #       uses: docker/login-action@v1
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.ACTOR }}
  #         password: ${{ secrets.ghcr-token }}
  #     - name: Build image
  #       id: docker_build
  #       uses: docker/build-push-action@v2
  #       with:
  #         builder: ${{ steps.buildx.outputs.name }}
  #         platforms: linux/arm64,linux/amd64
  #         push: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' }}
  #         tags: "${{ needs.prepare.outputs.DOCKER_IMAGE  }}:${{ needs.prepare.outputs.GITHUB_SHA }},${{ needs.prepare.outputs.DOCKER_IMAGE  }}:${{ needs.prepare.outputs.DOCKER_IMAGE_SEMVER }},${{ needs.prepare.outputs.DOCKER_IMAGE  }}:latest"
  #         build-args: |
  #           ACCESS_TOKEN=${{ secrets.ghcr-token }}
  #           ACCESS_USERNAME=${{ github.actor }}
  #           MICROSERVICE_NAME=${{ github.event.repository.name }}
  #           GITHUB_COMMIT_NUMBER=${{ needs.prepare.outputs.GITHUB_COMMIT_NUMBER }}
  #           GITHUB_SHA=${{ needs.prepare.outputs.GITHUB_SHA }}
  #         labels: "org.opencontainers.image.revision=${{ needs.prepare.outputs.GITHUB_SHA }},org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ'),org.opencontainers.image.version=${{ needs.prepare.outputs.DOCKER_IMAGE_SEMVER }},com.github.repo.branch=$(echo ${GITHUB_REF##*/} | tr '[A-Z]' '[a-z]')"
  #         no-cache: false
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max
  #         secrets: |
  #           GIT_AUTH_TOKEN=${{ secrets.ghcr-token }}

  # # This job is responsible for creation of the release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [ prepare, build-local ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Get list of the commits since last release
        run: |
          echo "$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"%h %s")" > .release_notes
      - name: Create Release
        id: create_release
        uses: actions/create-release@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.prepare.outputs.DOCKER_IMAGE_SEMVER }}
          release_name: v${{ needs.prepare.outputs.DOCKER_IMAGE_SEMVER }}
          body_path: .release_notes
          draft: false
          prerelease: ${{ github.ref != 'refs/heads/master' && github.ref != 'refs/heads/main' }}