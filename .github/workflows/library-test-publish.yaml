name: Microservices library release

on:
  workflow_call:
    inputs:
      enable-code-scans:
        required: false
        type: boolean
    secrets:
      ghcr-token:
        required: true
        description: Github token allowing access to the libraries and ghcr.

env:
  GOPRIVATE: "github.com/telegram-bot-app/*"
  ENABLE_CODE_SCANS: ${{ inputs.enable-code-scans }}

jobs:
  # This job is responsible for preparation of the build
  # environment variables.
  prepare:
    name: Preparing build context
    runs-on: ubuntu-20.04
    outputs:
      SANITISED_REPOSITORY_NAME: ${{ steps.get_env.outputs.SANITISED_REPOSITORY_NAME }}
      DOCKER_IMAGE: ${{ steps.get_env.outputs.DOCKER_IMAGE }}
      GITHUB_COMMIT_NUMBER: ${{ steps.get_env.outputs.GITHUB_COMMIT_NUMBER }}
      GITHUB_SHA: ${{ steps.get_env.outputs.GITHUB_SHA }}
      DOCKER_IMAGE_SEMVER: ${{ steps.semver.outputs.semantic_version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: Set environment variables
        id: get_env
        run: |
          TMP_SANITISED_REPOSITORY_NAME=$(echo ${{ github.event.repository.name }} | sed -e 's|\.|-|g')
          echo "::set-output name=SANITISED_REPOSITORY_NAME::$TMP_SANITISED_REPOSITORY_NAME"
          echo "::set-output name=DOCKER_IMAGE::ghcr.io/${{ github.repository_owner }}/$TMP_SANITISED_REPOSITORY_NAME"
          echo "::set-output name=GITHUB_COMMIT_NUMBER::$(git rev-list --count HEAD)"
          echo "::set-output name=GITHUB_SHA::$(echo ${GITHUB_SHA::8})"

      - name: Establish semver
        id: semver
        uses: lukaszraczylo/semver-generator@v1
        with:
          config_file: semver.yaml
          repository_local: true
          github_username: ${{ github.ACTOR }}
          github_token: $GHCR_TOKEN

      - name: Semver check
        run: |
          echo "Semantic version detected: ${{ steps.semver.outputs.semantic_version }}"

  # This job is responsible for running tests and linting the codebase
  test:
    name: "Unit testing"
    # needs: [prepare]
    runs-on: ubuntu-20.04
    # container: github/super-linter:v4
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.3
      - name: Configure git for private modules
        uses: extractions/netrc@v1
        with:
          machine: github.com
          username: ${{ github.actor }}
          password: ${{ secrets.ghcr-token }}
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Run unit tests
        run: |
          CI_RUN=${CI} make test

  # This job is responsible for running additional scans on the codebase
  code_scans:
    # needs: [ prepare ]
    name: Code scans
    runs-on: ubuntu-20.04
    container: golang:1-buster
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Configure git for private modules
        uses: extractions/netrc@v1
        with:
          machine: github.com
          username: ${{ github.actor }}
          password: ${{ secrets.ghcr-token }}
      - uses: actions/cache@v2
        id: cache
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Prepare for code scans
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          go get ./...
      - name: WriteGoList
        run: go list -json -m all > go.list
      - name: Running nancy
        if: env.ENABLE_CODE_SCANS == true
        continue-on-error: true
        uses: sonatype-nexus-community/nancy-github-action@main
      - name: Running gosec
        if: env.ENABLE_CODE_SCANS == true
        uses: securego/gosec@master
        with:
          args: ./...

  # This job is responsible for creation of the release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [ prepare, test, code_scans]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Get list of the commits since last release
        run: |
          echo "$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"%h %s")" > .release_notes
      - name: Create Release
        id: create_release
        uses: actions/create-release@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.prepare.outputs.DOCKER_IMAGE_SEMVER }}
          release_name: v${{ needs.prepare.outputs.DOCKER_IMAGE_SEMVER }}
          body_path: .release_notes
          draft: false
          prerelease: ${{ github.ref != 'refs/heads/master' && github.ref != 'refs/heads/main' }}